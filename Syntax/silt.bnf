id ::= <a group of non-space unicode characters>
id-list ::= <id> | <id-list>

int ::= [0-9]+

# Declarations

decl ::= <data-decl>
      || <empty-data-decl>
       | <record-decl>
       | <module-decl>
       | <import-decl>
       | <function-decl>
       | <function-clause-decl>
       | <fixity-decl>

## Data types

empty-data-decl ::= 'data' <id> <typed-parameter-list> <type-indices>
data-decl ::= 'data' <id> <typed-parameter-list> <type-indices> 'where' <constructor-list>
type-indices ::= ':' <expr>
typed-parameter-list ::= <typed-parameter>
                      | <typed-parameter> <typed-parameter-list>
ascription ::= <id-list> ':' <expr>
typed-parameter ::= '(' <ascription> ')'
                  | '{' <ascription> '}'
constructor-list ::= <constructor-decl>
                   | <constructor-decl> <constructor-decl-list>
constructor-decl ::= <ascription>

## Records

record-decl ::= 'record' <id> <typed-parameter-list>? <type-indices>? 'where' <record-element-list>?
record-element-list ::= <record-element>
                      | <record-element> <record-element-list>
record-element ::= <field-decl>
                 | <function-decl>
                 | <record-constructor-decl>

field-decl ::= 'field' <ascription>
record-constructor-decl ::= 'constructor' <id>

record-field-assignment-list ::= <record-field-assignment>
                               | <record-field-assignment> ';' <record-field-assignment-list>

record-field-assignment ::= <id> '=' <expr>

## Modules

module-decl ::= 'module' <id> <typed-parameter-list>? 'where' <decl-list>
decl-list ::= <decl>
            | <decl> <decl-list>

## Imports

qualified-name ::= <id> | <id> '.' <qualified-name>
import-decl ::= 'open'? 'import' <qualified-name>

## Functions

function-decl ::= <ascription>

function-clause-decl ::= <basic-expr-list> with <expr> '|' <basic-expr-list>? '=' <expr>
                       | <basic-expr-list> '=' <expr>

# Fixity

fixity-decl ::= 'infix' <int> <id-list>
              | 'infixl' <int> <id-list>
              | 'infixr' <int> <id-list>

# Patterns

basic-expr-list ::= <pattern-clause>
                  | <pattern-clause> <patter-clause-list>

pattern-clause ::= <expr>

# Expressions

expr ::= <typed-parameter-list> '->' <expr>
       | <basic-expr-list> '->' <expr>
       | '\' <binding-list> '->' <expr>
       | 'forall' <typed-parameter-list> '->' <expr>
       | 'let' <decl-list> 'in' <expr>
       | <application>
       | <basic-expr>

application ::= <basic-expr> <application>

binding-list ::=  <qualified-name>
               | <typed-parameter>
               | <qualified-name> <binding-list>
               | <typed-parameter> <binding-list>

basic-expr-list ::= <basic-expr>
                  | <basic-expr> <basic-expr-list>


basic-expr ::= <qualified-name>
             | '_'
             | 'Type'
             | '(' <expr> ')'
             | 'record' <basic-expr>? '{' <record-field-assignment-list>? '}'
