-- RUN: %silt --verify scopes %s

module bad-scope where

id : forall {A : Type} -> A -> A -- expected-note {{first declaration of 'id' occurs here}}
id x = y -- expected-error {{use of undeclared identifier 'y'}}

id : forall {A : Type} -> A -> A -- expected-error {{cannot shadow name 'id'}}
id x = x

typo : forall {A : Typo} -> A -> A -- expected-error {{use of undeclared identifier 'Typo'}}
typo x = x

typo2 : forall {A : Type} -> A -> B -- expected-error {{use of undeclared identifier 'B'}}
typo2 x = x

applyMissingVar : forall {A B : Type}{x : A}{f : A -> Type} -> f x -> f y -- expected-error {{use of undeclared identifier 'y'}}
applyMissingVar x = x

bodyBeforeSig x = x -- expected-error {{function body for 'bodyBeforeSig' must appear after function type signature}}

shadowingBinding : forall {A A : Type} -- expected-error {{cannot shadow name 'A'}}
                           {x x : A} -> x -- expected-error {{cannot shadow name 'x'}}
shadowingBinding = x --expected-error{{use of undeclared identifier 'x'}}

badVar : {A : Type} -> A -> A
badVar = \ x -> y --expected-error{{use of undeclared identifier 'y'}}

badLambdas : {A : Type} -> A -> A -> A
badLambdas = \ x -> (\ y -> (a w))
--expected-error @-1 {{use of undeclared identifier 'a'}}
--expected-error @-2 {{use of undeclared identifier 'w'}}

data BadNat : Typo where -- expected-error {{use of undeclared identifier 'Typo'}}
  z : BadNat
  s : BadNat -> BadNot -- expected-error {{use of undeclared identifier 'BadNot'}}

data N : Type where
  zero : N
  succ : N -> N

data Vec (X : Type) : N -> Type where
  [] : Vec X zero
  cons : {n : N} -> X -> Vec X n -> Vec X (succ n)

badHead : forall {n : N}{X : Type} -> Vec X (suc n) -> X -- expected-error {{use of undeclared identifier 'suc'}}
badHead (cons x xs) = x
