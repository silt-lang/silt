-- RUN: %silt --dump typecheck %s

module bad-types where

id : forall {A : Type} -> A -> A
id x = x

const : forall {A B : Type} -> A -> B -> A
const x _ = x

flip : forall {A B : Type} {C : A -> B -> Type} ->
       (forall (x : A) (y : B) -> C x y) -> (forall (y : B) (x : A) -> C x y)
flip f = \ y x -> f x y

data List (A : Type) : Type where
  Nil  : List A
  Cons : A -> List A -> List A

append : forall {A : Type} -> List A -> List A -> List A
append Nil ys = ys
append (Cons x xs) ys = Cons x (append xs ys)

data N : Type where
  Z : N
  S : N -> N

seven : N
seven = S (S (S (S (S (S (S Z))))))

